/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import clases.ProductoCongelado;
import clases.ProductoFresco;
import clases.ProductoRefrigerado;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import rojerusan.RSAnimation;

/**
 *
 * @author Guffy
 */

public class VentanaNuevoProducto extends javax.swing.JFrame {

    /**
     * Creates new form VentanaNuevoProducto
     */
   
    int xMouse;
    int yMouse;
    private final char constante = 'ð';
    public VentanaNuevoProducto() {
        initComponents();
       // this.setLocationRelativeTo(null);
        rSComboBoxSeleccionProductoMaterial1.setSelectedIndex(0);
        ocultarCamposExtras();
        
        RSAnimation.setBajar(-50, 200, 2, 2, this);
        this.setLocationRelativeTo(null);
        try{
            
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            
        }
        catch (Exception e){
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenedor = new javax.swing.JPanel();
        campoDescripProducto = new LIB.FSTexFieldMD();
        campoCodigoProducto = new LIB.FSTexFieldMD();
        campoNombreProducto = new LIB.FSTexFieldMD();
        campoOrganismo = new LIB.FSTexFieldMD();
        CalendarioFechaEnvazado = new rojeru_san.componentes.RSDateChooser();
        campoNumLoteProducto = new LIB.FSTexFieldMD();
        campoPrecioProducto = new RSMaterialComponent.RSTextFieldIconDos();
        campoPaisOrigen = new RSMaterialComponent.RSComboBoxMaterial();
        rSComboBoxSeleccionProductoMaterial1 = new RSMaterialComponent.RSComboBoxMaterial();
        campoTemperatura = new RSMaterialComponent.RSComboBoxMaterial();
        CalendarioFechaVencimiento = new rojeru_san.componentes.RSDateChooser();
        btnCargarProducto = new javax.swing.JButton();
        jPanelRound1 = new LIB.JPanelRound();
        btnVolver = new javax.swing.JButton();
        btnCerrarVentana = new javax.swing.JButton();
        LabelAñadirNuevoProducto = new javax.swing.JLabel();
        LabelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        contenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        campoDescripProducto.setForeground(new java.awt.Color(0, 112, 192));
        campoDescripProducto.setBordeColorFocus(new java.awt.Color(0, 112, 192));
        campoDescripProducto.setPlaceholder("Descripcion");
        contenedor.add(campoDescripProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 260, -1));

        campoCodigoProducto.setForeground(new java.awt.Color(0, 112, 192));
        campoCodigoProducto.setBordeColorFocus(new java.awt.Color(0, 112, 192));
        campoCodigoProducto.setPlaceholder("Codigo Producto(ej. 123245623433)");
        campoCodigoProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                campoCodigoProductoFocusGained(evt);
            }
        });
        campoCodigoProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCodigoProductoActionPerformed(evt);
            }
        });
        campoCodigoProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoCodigoProductoKeyTyped(evt);
            }
        });
        contenedor.add(campoCodigoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 260, 40));

        campoNombreProducto.setForeground(new java.awt.Color(0, 112, 192));
        campoNombreProducto.setBordeColorFocus(new java.awt.Color(0, 112, 192));
        campoNombreProducto.setPlaceholder("Nombre del Producto");
        campoNombreProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNombreProductoKeyTyped(evt);
            }
        });
        contenedor.add(campoNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 260, -1));

        campoOrganismo.setForeground(new java.awt.Color(0, 112, 192));
        campoOrganismo.setBordeColorFocus(new java.awt.Color(0, 112, 192));
        campoOrganismo.setPlaceholder("Codigo de Organismo");
        campoOrganismo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoOrganismoKeyTyped(evt);
            }
        });
        contenedor.add(campoOrganismo, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, -1, -1));

        CalendarioFechaEnvazado.setFormatoFecha("dd/MM/yyyy");
        CalendarioFechaEnvazado.setPlaceholder("Seleccionar Fecha de Envasado");
        contenedor.add(CalendarioFechaEnvazado, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 250, 40));

        campoNumLoteProducto.setForeground(new java.awt.Color(0, 112, 192));
        campoNumLoteProducto.setBordeColorFocus(new java.awt.Color(0, 112, 192));
        campoNumLoteProducto.setPlaceholder("Numero de Lote(ej. 223245623433)");
        campoNumLoteProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNumLoteProductoKeyTyped(evt);
            }
        });
        contenedor.add(campoNumLoteProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 200, -1, -1));

        campoPrecioProducto.setColorIcon(new java.awt.Color(0, 180, 87));
        campoPrecioProducto.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.MONETIZATION_ON);
        campoPrecioProducto.setPlaceholder("Precio");
        campoPrecioProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoPrecioProductoKeyTyped(evt);
            }
        });
        contenedor.add(campoPrecioProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, -1, -1));

        campoPaisOrigen.setForeground(new java.awt.Color(0, 112, 192));
        campoPaisOrigen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione un Pais", "Afganistán", "Albania", "Alemania", "Andorra", "Angola", "Antigua y Barbuda", "Arabia Saudita", "Argelia", "Argentina", "Armenia", "Australia", "Austria", "Azerbaiyán", "Bahamas", "Bangladés", "Barbados", "Baréin", "Bélgica", "Belice", "Benín", "Bielorrusia", "Birmania", "Bolivia", "Bosnia y Herzegovina", "Botsuana", "Brasil", "Brunéi", "Bulgaria", "Burkina Faso", "Burundi", "Bután", "Cabo Verde", "Camboya", "Camerún", "Canadá", "Catar", "Chad", "Chile", "China", "Chipre", "Ciudad del Vaticano", "Colombia", "Comoras", "Corea del Norte", "Corea del Sur", "Costa de Marfil", "Costa Rica", "Croacia", "Cuba", "Dinamarca", "Dominica", "Ecuador", "Egipto", "El Salvador", "Emiratos Árabes Unidos", "Eritrea", "Eslovaquia", "Eslovenia", "España", "Estados Unidos", "Estonia", "Etiopía", "Filipinas", "Finlandia", "Fiyi", "Francia", "Gabón", "Gambia", "Georgia", "Ghana", "Granada", "Grecia", "Guatemala", "Guyana", "Guinea", "Guinea ecuatorial", "Guinea-Bisáu", "Haití", "Honduras", "Hungría", "India", "Indonesia", "Irak", "Irán", "Irlanda", "Islandia", "Islas Marshall", "Islas Salomón", "Israel", "Italia", "Jamaica", "Japón", "Jordania", "Kazajistán", "Kenia", "Kirguistán", "Kiribati", "Kuwait", "Laos", "Lesoto", "Letonia", "Líbano", "Liberia", "Libia", "Liechtenstein", "Lituania", "Luxemburgo", "Macedonia del Norte", "Madagascar", "Malasia", "Malaui", "Maldivas", "Malí", "Malta", "Marruecos", "Mauricio", "Mauritania", "México", "Micronesia", "Moldavia", "Mónaco", "Mongolia", "Montenegro", "Mozambique", "Namibia", "Nauru", "Nepal", "Nicaragua", "Níger", "Nigeria", "Noruega", "Nueva Zelanda", "Omán", "Países Bajos", "Pakistán", "Palaos", "Panamá", "Papúa Nueva Guinea", "Paraguay", "Perú", "Polonia", "Portugal", "Reino Unido", "República Centroafricana", "República Checa", "República del Congo", "República Democrática del Congo", "República Dominicana", "Ruanda", "Rumanía", "Rusia", "Samoa", "San Cristóbal y Nieves", "San Marino", "San Vicente y las Granadinas", "Santa Lucía", "Santo Tomé y Príncipe", "Senegal", "Serbia", "Seychelles", "Sierra Leona", "Singapur", "Siria", "Somalia", "Sri Lanka", "Suazilandia", "Sudáfrica", "Sudán", "Sudán del Sur", "Suecia", "Suiza", "Surinam", "Tailandia", "Tanzania", "Tayikistán", "Timor Oriental", "Togo", "Tonga", "Trinidad y Tobago", "Túnez", "Turkmenistán", "Turquía", "Tuvalu", "Ucrania", "Uganda", "Uruguay", "Uzbekistán", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Yibuti", "Zambia", "Zimbabue" }));
        contenedor.add(campoPaisOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 270, 250, 40));

        rSComboBoxSeleccionProductoMaterial1.setForeground(new java.awt.Color(0, 112, 192));
        rSComboBoxSeleccionProductoMaterial1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione un tipo de Producto", "Congelado", "Fresco", "Refrigerado" }));
        rSComboBoxSeleccionProductoMaterial1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rSComboBoxSeleccionProductoMaterial1ItemStateChanged(evt);
            }
        });
        contenedor.add(rSComboBoxSeleccionProductoMaterial1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, 250, 40));

        campoTemperatura.setForeground(new java.awt.Color(0, 112, 192));
        campoTemperatura.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una Temperatura", "-30", "-29", "-28", "-27", "-26", "-25", "-24", "-23", "-22", "-21", "-20", "-19", "-18", "-17", "-16", "-15", "-14", "-13", "-12", "-11", "-10", "-9", "-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        contenedor.add(campoTemperatura, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 250, 40));

        CalendarioFechaVencimiento.setFormatoFecha("dd/MM/yyyy");
        CalendarioFechaVencimiento.setPlaceholder("Seleccionar Fecha Vencimiento");
        contenedor.add(CalendarioFechaVencimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, 250, 40));

        btnCargarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cargarProducto.png"))); // NOI18N
        btnCargarProducto.setBorderPainted(false);
        btnCargarProducto.setContentAreaFilled(false);
        btnCargarProducto.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cargarProductoOVER.png"))); // NOI18N
        btnCargarProducto.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btnCargarProductoMouseMoved(evt);
            }
        });
        btnCargarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarProductoActionPerformed(evt);
            }
        });
        contenedor.add(btnCargarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 450, 200, 50));

        jPanelRound1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelRound1MouseDragged(evt);
            }
        });
        jPanelRound1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelRound1MousePressed(evt);
            }
        });

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/back_arrow_35px.png"))); // NOI18N
        btnVolver.setBorder(null);
        btnVolver.setBorderPainted(false);
        btnVolver.setContentAreaFilled(false);
        btnVolver.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVolver.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnCerrarVentana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/shutdown35px.png"))); // NOI18N
        btnCerrarVentana.setBorder(null);
        btnCerrarVentana.setBorderPainted(false);
        btnCerrarVentana.setContentAreaFilled(false);
        btnCerrarVentana.setFocusPainted(false);
        btnCerrarVentana.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnCerrarVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarVentanaActionPerformed(evt);
            }
        });

        LabelAñadirNuevoProducto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelAñadirNuevoProducto.setForeground(new java.awt.Color(255, 255, 255));
        LabelAñadirNuevoProducto.setText("Añadir Nuevo Producto");

        javax.swing.GroupLayout jPanelRound1Layout = new javax.swing.GroupLayout(jPanelRound1);
        jPanelRound1.setLayout(jPanelRound1Layout);
        jPanelRound1Layout.setHorizontalGroup(
            jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRound1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(409, 409, 409)
                .addComponent(LabelAñadirNuevoProducto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 409, Short.MAX_VALUE)
                .addComponent(btnCerrarVentana, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        jPanelRound1Layout.setVerticalGroup(
            jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRound1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCerrarVentana)
                    .addComponent(btnVolver)
                    .addComponent(LabelAñadirNuevoProducto))
                .addGap(16, 16, 16))
        );

        contenedor.add(jPanelRound1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1160, 50));

        LabelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenFondo.png"))); // NOI18N
        contenedor.add(LabelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 1170, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(contenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 1117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(contenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        VentanaGestionarProductos nuevo = new VentanaGestionarProductos();
        nuevo.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnCerrarVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarVentanaActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnCerrarVentanaActionPerformed

    private void jPanelRound1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelRound1MouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_jPanelRound1MouseDragged

    private void jPanelRound1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelRound1MousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jPanelRound1MousePressed

    private void campoCodigoProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCodigoProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCodigoProductoActionPerformed

    private void rSComboBoxSeleccionProductoMaterial1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rSComboBoxSeleccionProductoMaterial1ItemStateChanged
        // TODO add your handling code here:
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==0){
            campoTemperatura.setVisible(false);
            campoTemperatura.setSelectedIndex(0);
            campoPaisOrigen.setVisible(false);
            CalendarioFechaEnvazado.setVisible(false);
            campoPaisOrigen.setSelectedIndex(0);
            CalendarioFechaEnvazado.setDatoFecha(null);
            campoOrganismo.setVisible(false);
            campoOrganismo.setText("");
            
            
        }
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==1){
            campoTemperatura.setVisible(true);
            campoPaisOrigen.setVisible(false);
            CalendarioFechaEnvazado.setVisible(false);
            campoPaisOrigen.setSelectedIndex(0);
            CalendarioFechaEnvazado.setDatoFecha(null);
            campoOrganismo.setVisible(false);
            campoOrganismo.setText("");
            
        }
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==2){
            campoTemperatura.setVisible(false);
            campoPaisOrigen.setVisible(true);
            CalendarioFechaEnvazado.setVisible(true);
            campoOrganismo.setVisible(false);
            campoOrganismo.setText("");
            CalendarioFechaEnvazado.setDatoFecha(null);
            campoTemperatura.setSelectedIndex(0);
        }
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==3){
            campoTemperatura.setVisible(false);
            campoPaisOrigen.setVisible(false);
            CalendarioFechaEnvazado.setVisible(false);
            campoOrganismo.setVisible(true);
            CalendarioFechaEnvazado.setDatoFecha(null);
            campoPaisOrigen.setSelectedIndex(0);
        }
        
        
    }//GEN-LAST:event_rSComboBoxSeleccionProductoMaterial1ItemStateChanged

    private void btnCargarProductoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCargarProductoMouseMoved
        // TODO add your handling code here:
        RSAnimation.setMoverDerecha(460, 461, 1, 1, btnCargarProducto);
    }//GEN-LAST:event_btnCargarProductoMouseMoved

    private void btnCargarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarProductoActionPerformed
        // TODO add your handling code here:
        String veryf1= "";
        int verificacion = verificacionCampos();
        if(CalendarioFechaVencimiento.getDatoFecha() != null){
            String formatoFecha = "dd/MM/YYYY";
            Date fecha= CalendarioFechaVencimiento.getDatoFecha();
            SimpleDateFormat formateador = new SimpleDateFormat(formatoFecha);
           if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==1 && verificacion == 1){
               campoCodigoProducto.setBordeColorFocus(new Color(0,112,192));
               campoNumLoteProducto.setBordeColorFocus(new Color(0,112,192));
              
                String congelado = "congelado";
              
                ProductoCongelado p1;
                
                p1 = new ProductoCongelado(campoNombreProducto.getText(),campoDescripProducto.getText(), campoCodigoProducto.getText(), formateador.format(CalendarioFechaVencimiento.getDatoFecha()) , campoNumLoteProducto.getText(), campoPrecioProducto.getText(), congelado, (String) campoTemperatura.getSelectedItem());
                System.out.println(p1.getNombre());
                System.out.println(p1.getDescripcion());
                System.out.println(p1.getCodigoDeProducto());
                System.out.println(p1.getFechaCaducidad());
                System.out.println(p1.getNumLote());
                System.out.println(p1.getPrecio());
                System.out.println(p1.getTipoDeProducto());
                System.out.println(p1.getTempRecomendada());
                   try{
                       File archivo = new File("D:/Escritorio/Proyecto-Final/src/archivos/productosCongelados.txt" );
                       FileWriter escribir = new FileWriter(archivo,true);
                       BufferedWriter bescribir = new BufferedWriter(escribir);

                    if(archivo.exists()){
                        bescribir.append(p1.getNombre()+constante+p1.getDescripcion()+constante+p1.getCodigoDeProducto()+constante+p1.getFechaCaducidad()+constante+p1.getNumLote()+constante+p1.getPrecio()+constante+p1.getTempRecomendada()+constante+p1.getTipoDeProducto());
                        bescribir.newLine();
                        bescribir.close();
                        escribir.close();
                        Limpiar();
                       } 
                   } catch(Exception e){
                       e.printStackTrace();
                   }
            }
           else if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==2 && verificacion == 1){
               campoCodigoProducto.setBordeColorFocus(new Color(0,112,192));
               campoNumLoteProducto.setBordeColorFocus(new Color(0,112,192));
               String fresco = "fresco";
               String formatoFecha2 = "dd/MM/YYYY";
                Date fecha2= CalendarioFechaEnvazado.getDatoFecha();
                SimpleDateFormat formateador2 = new SimpleDateFormat(formatoFecha2);
                
                ProductoFresco p1;
                p1 = new ProductoFresco(campoNombreProducto.getText(),campoDescripProducto.getText(), campoCodigoProducto.getText(), formateador.format(CalendarioFechaVencimiento.getDatoFecha()) , campoNumLoteProducto.getText(), campoPrecioProducto.getText(), fresco, formateador2.format(CalendarioFechaEnvazado.getDatoFecha()), (String)campoPaisOrigen.getSelectedItem());
                System.out.println(p1.getNombre());
                System.out.println(p1.getDescripcion());
                System.out.println(p1.getCodigoDeProducto());
                System.out.println(p1.getFechaCaducidad());
                System.out.println(p1.getNumLote());
                System.out.println(p1.getPrecio());
                System.out.println(p1.getTipoDeProducto());
                System.out.println(p1.getFechaEnvasado());
                System.out.println(p1.getPaisOrigen());
                   try{
                       File archivo = new File("D:/Escritorio/Proyecto-Final/src/archivos/productosFrescos.txt" );
                       FileWriter escribir = new FileWriter(archivo,true);
                       BufferedWriter bescribir = new BufferedWriter(escribir);

                    if(archivo.exists()){
                        bescribir.append(p1.getNombre()+constante+p1.getDescripcion()+constante+p1.getCodigoDeProducto()+constante+p1.getFechaCaducidad()+constante+p1.getNumLote()+constante+p1.getPrecio()+constante+p1.getFechaEnvasado()+constante+p1.getPaisOrigen()+constante+p1.getTipoDeProducto());
                        bescribir.newLine();
                        bescribir.close();
                        escribir.close();
                        Limpiar();
                       } 
                   } catch(Exception e){
                       e.printStackTrace();
                   }
               
           }
           else if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==3 && verificacion == 1){
               campoCodigoProducto.setBordeColorFocus(new Color(0,112,192));
               campoNumLoteProducto.setBordeColorFocus(new Color(0,112,192));
               campoOrganismo.setBordeColorFocus(new Color(0,112,192));
               String refrigerado = "refrigerado";
                ProductoRefrigerado p1;
                p1 = new ProductoRefrigerado(campoNombreProducto.getText(),campoDescripProducto.getText(), campoCodigoProducto.getText(), formateador.format(CalendarioFechaVencimiento.getDatoFecha()) , campoNumLoteProducto.getText(), campoPrecioProducto.getText(), refrigerado, campoOrganismo.getText());
                System.out.println(p1.getNombre());
                System.out.println(p1.getDescripcion());
                System.out.println(p1.getCodigoDeProducto());
                System.out.println(p1.getFechaCaducidad());
                System.out.println(p1.getNumLote());
                System.out.println(p1.getPrecio());
                System.out.println(p1.getTipoDeProducto());
                System.out.println(p1.getCodigoDeOrganismo());
                   try{
                       File archivo = new File("D:/Escritorio/Proyecto-Final/src/archivos/productosRefrigerados.txt" );
                       FileWriter escribir = new FileWriter(archivo,true);
                       BufferedWriter bescribir = new BufferedWriter(escribir);

                    if(archivo.exists()){
                        bescribir.append(p1.getNombre()+constante+p1.getDescripcion()+constante+p1.getCodigoDeProducto()+constante+p1.getFechaCaducidad()+constante+p1.getNumLote()+constante+p1.getPrecio()+constante+p1.getCodigoDeOrganismo()+constante+p1.getTipoDeProducto());
                        bescribir.newLine();
                        bescribir.close();
                        escribir.close();
                        Limpiar();
                       } 
                   } catch(Exception e){
                       e.printStackTrace();
                   }
        
           }
           
        }
    }//GEN-LAST:event_btnCargarProductoActionPerformed
    public void Limpiar(){
        campoNombreProducto.setText("");
        campoDescripProducto.setText("");
        campoCodigoProducto.setText("");
        rSComboBoxSeleccionProductoMaterial1.setSelectedIndex(0);
        campoPaisOrigen.setSelectedIndex(0);
        campoNumLoteProducto.setText("");  
        campoPrecioProducto.setText("");
        campoOrganismo.setText("");
        CalendarioFechaVencimiento.setDatoFecha(null);
        CalendarioFechaEnvazado.setDatoFecha(null);
        campoTemperatura.setSelectedIndex(0);
        
    }
    private void campoNombreProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNombreProductoKeyTyped
        // TODO add your handling code here:
        String str=campoNombreProducto.getText();
        char c = evt.getKeyChar();
        if(((c<'a' || c>'z') && (c<'A' || c >'Z')) && (c != ' ')) evt.consume();
       if(str.length()>0){
            char primera=str.charAt(0);
            str=Character.toUpperCase(primera)+str.substring(1, str.length());
        }
       campoNombreProducto.setText(str);
    }//GEN-LAST:event_campoNombreProductoKeyTyped

    private void campoCodigoProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCodigoProductoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(campoCodigoProducto.getText().length()>11) {
          evt.consume();
          Toolkit.getDefaultToolkit().beep();
        }
        if((c<'0' || c >'9')&& (c != ' ')) evt.consume();
    }//GEN-LAST:event_campoCodigoProductoKeyTyped

    private void campoNumLoteProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNumLoteProductoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(campoNumLoteProducto.getText().length()>11) {evt.consume();
          Toolkit.getDefaultToolkit().beep();
        }
        if((c<'0' || c >'9')&& (c != ' ')) evt.consume();
    }//GEN-LAST:event_campoNumLoteProductoKeyTyped

    private void campoOrganismoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoOrganismoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(campoOrganismo.getText().length()>11) {evt.consume();
          Toolkit.getDefaultToolkit().beep();
        }
        if((c<'0' || c >'9')&& (c != ' ')) evt.consume();
    }//GEN-LAST:event_campoOrganismoKeyTyped

    private void campoPrecioProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPrecioProductoKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if((Character.isDigit(c))||(c==KeyEvent.VK_PERIOD)||(c==KeyEvent.VK_BACK_SPACE)){
            int punto=0;
            if(c==KeyEvent.VK_PERIOD){ 
                        String s=campoPrecioProducto.getText();
                        int dot=s.indexOf('.');
                        punto=dot;
                        if(dot!=-1){
                            getToolkit().beep();
                            evt.consume();
                        }
                    }
        }
        else{    
           // getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_campoPrecioProductoKeyTyped

    private void campoCodigoProductoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoCodigoProductoFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_campoCodigoProductoFocusGained

    public int verificacionCampos(){
        
        
       
        String verif1 = "";
        boolean ver= comprobarCod(campoCodigoProducto.getText());
        boolean verNumLote = comprobarCod(campoNumLoteProducto.getText());
        boolean verCod = comprobarCod(campoOrganismo.getText());
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==0){
            if(campoNombreProducto.getText().equals(verif1) || campoDescripProducto.getText().equals(verif1) || campoNumLoteProducto.getText().equals(verif1) || campoPrecioProducto.getText().equals(verif1) || rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==0 || CalendarioFechaVencimiento.getDatoFecha()==null  ){
            
            JOptionPane.showMessageDialog(null, "Completa todos lo campos correctamente.","ERROR",JOptionPane.ERROR_MESSAGE);
            
            
            return 0;
        }
            else {
                return 1;
            }
            
        }
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==1){
            if(campoNombreProducto.getText().equals(verif1) || campoDescripProducto.getText().equals(verif1) || campoNumLoteProducto.getText().equals(verif1) || campoPrecioProducto.getText().equals(verif1) || rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==0 || CalendarioFechaVencimiento.getDatoFecha()==null || campoCodigoProducto.getText().equals(verif1) || campoTemperatura.getSelectedIndex()==0 || campoCodigoProducto.getText().equals(verif1)){
            
            JOptionPane.showMessageDialog(null, "Completa todos lo campos(12 Digitos en los Codigos).","ERROR",JOptionPane.ERROR_MESSAGE);
        return 0;
        }
            else {
                if(ver==false || verNumLote==false){
                    campoCodigoProducto.setBordeColorFocus(new Color(192,55,36));
                    campoNumLoteProducto.setBordeColorFocus(new Color(192,55,36));
                    JOptionPane.showMessageDialog(null, "Codigo de Producto y Numero de Lote deben tener 12 Digitos!.","ERROR",JOptionPane.ERROR_MESSAGE);
                }else{
                return 1;
                }
            }
            
        }
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==2){
            if(campoNombreProducto.getText().equals(verif1) || campoDescripProducto.getText().equals(verif1) || campoNumLoteProducto.getText().equals(verif1) || campoPrecioProducto.getText().equals(verif1) || rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==0 || CalendarioFechaVencimiento.getDatoFecha()==null || campoCodigoProducto.getText().equals(verif1) || campoPaisOrigen.getSelectedIndex()==0 || CalendarioFechaEnvazado.getDatoFecha() == null){
            
            JOptionPane.showMessageDialog(null, "Completa todos lo campos(12 Digitos en los Codigos).","ERROR",JOptionPane.ERROR_MESSAGE);
        return 0;
        }
            else {
                if(ver==false || verNumLote==false){
                    campoCodigoProducto.setBordeColorFocus(new Color(192,55,36));
                    campoNumLoteProducto.setBordeColorFocus(new Color(192,55,36));
                    JOptionPane.showMessageDialog(null, "Codigo de Producto y Numero de Lote deben tener 12 Digitos!.","ERROR",JOptionPane.ERROR_MESSAGE);
                }else{
                return 1;
                }
            }
            
        }
        if(rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==3){
            if(campoNombreProducto.getText().equals(verif1) || campoDescripProducto.getText().equals(verif1) || campoNumLoteProducto.getText().equals(verif1) || campoPrecioProducto.getText().equals(verif1) || rSComboBoxSeleccionProductoMaterial1.getSelectedIndex()==0 || CalendarioFechaVencimiento.getDatoFecha()==null || campoCodigoProducto.getText().equals(verif1) || campoOrganismo.getText().equals(verif1) ){
            
            JOptionPane.showMessageDialog(null, "Completa todos lo campos(12 Digitos en los Codigos).","ERROR",JOptionPane.ERROR_MESSAGE);
            return 0;
            }
        else {
                if(ver==false || verNumLote==false || verCod==false){
                    campoCodigoProducto.setBordeColorFocus(new Color(192,55,36));
                    campoNumLoteProducto.setBordeColorFocus(new Color(192,55,36));
                    campoOrganismo.setBordeColorFocus(new Color(192,55,36));
                    JOptionPane.showMessageDialog(null, "Codigo de Producto y Numero de Lote y Codigo de Organismo deben tener 12 Digitos!.","ERROR",JOptionPane.ERROR_MESSAGE);
                }else{
                return 1;
                }
            }
            }
     
        
        
    
        return 0;
    }
    public void ocultarCamposExtras(){
        campoTemperatura.setVisible(false);
        CalendarioFechaEnvazado.setVisible(false);
        campoPaisOrigen.setVisible(false);
        campoOrganismo.setVisible(false);
    }
    /**
     * @param args the command line arguments
     */
    public boolean comprobarCod(String campo){
    boolean resultado;
        try {
            resultado = false;
                for(char c : campo.toCharArray()){
                    if(!Character.isDigit(c)){
                        resultado = false;
                    }
                    
                }
                if(campo.toCharArray().length > 11 && campo.toCharArray().length <=12){
                    for(char c : campo.toCharArray()){
                        if(c != '-' ){
                            if(!Character.isDigit(c)){
                                resultado = false;
                                break;
                            }else{
                                resultado = true;
                                 System.out.println(campo.toCharArray().length);
                            }
                        }else{
                            break;
                        }
                    }
                }
            

        } catch (NumberFormatException excepcion) {
            resultado = false;
        }
        return resultado;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaNuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaNuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaNuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaNuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaNuevoProducto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.componentes.RSDateChooser CalendarioFechaEnvazado;
    private rojeru_san.componentes.RSDateChooser CalendarioFechaVencimiento;
    private javax.swing.JLabel LabelAñadirNuevoProducto;
    private javax.swing.JLabel LabelFondo;
    private javax.swing.JButton btnCargarProducto;
    private javax.swing.JButton btnCerrarVentana;
    private javax.swing.JButton btnVolver;
    private LIB.FSTexFieldMD campoCodigoProducto;
    private LIB.FSTexFieldMD campoDescripProducto;
    private LIB.FSTexFieldMD campoNombreProducto;
    private LIB.FSTexFieldMD campoNumLoteProducto;
    private LIB.FSTexFieldMD campoOrganismo;
    private RSMaterialComponent.RSComboBoxMaterial campoPaisOrigen;
    private RSMaterialComponent.RSTextFieldIconDos campoPrecioProducto;
    private RSMaterialComponent.RSComboBoxMaterial campoTemperatura;
    private javax.swing.JPanel contenedor;
    private LIB.JPanelRound jPanelRound1;
    private RSMaterialComponent.RSComboBoxMaterial rSComboBoxSeleccionProductoMaterial1;
    // End of variables declaration//GEN-END:variables
}
